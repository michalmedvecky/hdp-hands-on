{% from "includes/templates/zookeeper_quorum.j2" import zookeeper_quorum with context %}
<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
<configuration>

{% if hadoop_ha is not defined %}
    <property>
        <name>yarn.resourcemanager.hostname</name>
{% for host in groups[hadoop_cluster] if host in groups['yarn-resourcemanager'] %}
{% if loop.first %}
        <value>{{ hostvars[host]['hadoop_hostname']|default(hostvars[host]['inventory_hostname']) }}</value>
{% endif %}
{% endfor %}
    </property>
{% endif %}

    <property>
        <description>History server address.</description>
        <name>yarn.log.server.url</name>
{% for host in groups[hadoop_cluster] if host in groups['mapred-historyserver'] %}
{% if loop.first %}
        <value>{{ hostvars[host]['hadoop_hostname']|default(hostvars[host]['inventory_hostname']) }}:19888/jobhistory/logs</value>
{% endif %}
{% endfor %}
    </property>

    <property>
        <name>yarn.resourcemanager.scheduler.class</name>
        <value>org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FairScheduler</value>
    </property>

    <property>
        <description>Aggregate all of the logs in one location.</description>
        <name>yarn.log-aggregation-enable</name>
        <value>true</value>
    </property>

    <property>
        <name>yarn.nodemanager.remote-app-log-dir</name>
        <value>/yarn/app-logs</value>
    </property>

{% if 'yarn-nodemanager' in group_names %}
    <property>
        <name>yarn.nodemanager.linux-container-executor.group</name>
        <value>hadoop</value>
    </property>
    <property>
        <name>yarn.nodemanager.resource.cpu-vcores</name>
        <value>{{ 4 if ansible_processor_vcpus < 4 else (ansible_processor_vcpus /2) | int }}</value>
    </property>
    <property>
        <name>yarn.nodemanager.resource.memory-mb</name>
        <value>{{ ((((ansible_memtotal_mb * 0.8) + 1023) // 1024) * 1024) | int }}</value>
    </property>
    <property>
        <name>yarn.nodemanager.vmem-check-enabled</name>
        <value>false</value>
    </property>
    <property>
        <name>yarn.nodemanager.aux-services</name>
        <value>mapreduce_shuffle</value>
    </property>
    <property>
        <name>yarn.nodemanager.aux-services.mapreduce_shuffle.class</name>
        <value>org.apache.hadoop.mapred.ShuffleHandler</value>
    </property>
    <property>
        <name>yarn.nodemanager.local-dirs</name>
        <value>{{ yarn_nodemanager_local_dir }}</value>
    </property>
    <property>
        <name>yarn.nodemanager.bind-host</name>
        <value>0.0.0.0</value>
    </property>
{% endif %}

    <property>
        <name>yarn.scheduler.minimum-allocation-mb</name>
        <value>1024</value>
    </property>
    <property>
        <name>yarn.scheduler.maximum-allocation-mb</name>
        <value>{{ ((((ansible_memtotal_mb * 0.8) + 1023) // 1024) * 1024) | int }}</value>
    </property>
    <property>
        <name>yarn.scheduler.minimum-allocation-vcores</name>
        <value>1</value>
    </property>
    <property>
        <name>yarn.scheduler.maximum-allocation-vcores</name>
        <value>8</value>
    </property>
{#{% if 'yarn-resourcemanager' in group_names %}#}
    <property>
        <name>yarn.resourcemanager.nodes.exclude-path</name>
        <value>/opt/hadoop/etc/hadoop/yarn.exclude</value>
    </property>
{% if 'yarn-resourcemanager' in group_names %}
    <property>
        <name>yarn.resourcemanager.bind-host</name>
        <value>0.0.0.0</value>
    </property>
{% endif %}

{# RM Restart #}
   <property>
      <name>yarn.resourcemanager.recovery.enabled</name>
      <value>enabled</value>
      </property>
   <property>
      <name>yarn.resourcemanager.store.class</name>
      <value>org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore</value>
   </property>
   <property>
      <name>yarn.resourcemanager.zk-state-store.parent-path</name>
      <value>/rmstore</value>
   </property>

{# RM Restart + HA common part #}
   <property>
      <name>yarn.resourcemanager.zk-address</name>
      <value>{{ zookeeper_quorum(hadoop_cluster) }}</value>
   </property>
{# RM HA #}
   <property>
      <name>yarn.resourcemanager.ha.enabled</name>
      <value>true</value>
   </property>
   <property>
      <name>yarn.resourcemanager.cluster-id</name>
      <value>{{ hadoop_cluster }}</value>
   </property>
   <property>
      <name>yarn.resourcemanager.ha.rm-ids</name>
      <value>{%- set comma = joiner(",") -%}
{%- for host in groups[hadoop_cluster] if host in groups['yarn-resourcemanager'] -%}
{{- comma() }}{{ hostvars[host]['hadoop_hostname']|default(hostvars[host]['inventory_hostname']) }}
{%- endfor -%}</value>
   </property>
{%- for host in groups[hadoop_cluster] if host in groups['yarn-resourcemanager'] -%}
   <property>
      <name>yarn.resourcemanager.hostname.{{ host }}</name>
      <value>{{ host }}</value>
   </property>
{% endfor %}
</configuration>
